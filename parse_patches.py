# -*- coding: utf-8 -*-
"""
Parse each patch from a file using existing pattern and patch alignment
artifacts.

Created on Tue Mar 22 2022

@author: Oliver
"""

import os
import json

import numpy as np
import pandas as pd
from PIL import Image

from pic_parser.patch_tools import (isolate_patches, parse_patch)
from pic_parser.utils import cell_to_array


if __name__ == "__main__":
    DIR = "E:/Dropbox/SPEED/Self Driving EHD/Data/10-Mar-2022 large nozzle mosaic"
    LOGDIR = "logs"

    PIC = os.path.join(DIR, "10-mar-22__1.6V harmonics__10x.tif")
    PATTERN = os.path.join(DIR, "pattern.txt")
    WAVES = os.path.join(DIR, "results 10 mar large noz 300 pitch.xlsx")

    # These files generated by other post-process workflows:
    # Geometric scaling to align pattern in PIC
    pattern_file = os.path.join(DIR, LOGDIR, "pattern_params.json")
    # Positions of individual prints along the pattern path
    offsets_file = os.path.join(DIR, LOGDIR, "offsetlist.txt")
    # Points to exclude for any reason (manually edit this file)
    exclude_file = os.path.join(DIR, LOGDIR, "exclude_idx.txt")
    output_file = os.path.join(DIR, LOGDIR, "measurements.xlsx")

    with open(pattern_file, 'r') as f:
        pattern_params = json.load(f)
    offsets = np.loadtxt(offsets_file)
    exclude = np.loadtxt(exclude_file).astype(int)

    patches = isolate_patches(PIC, PATTERN, pattern_params, offsets,
                              exclude=exclude)

    waves = pd.read_excel(WAVES, index_col=0)
    # Expand waves dataframe to admit measured quantities
    new_cols = ('area', 'obj_count', 
                'absintegral', 'absmax', 'vmag', 'bias')
    for col in new_cols:
        waves[col] = None

    def log_pic(patch, desc):
        Image.fromarray(patch).save(os.path.join(
            DIR, f"logs/patches/image_{desc}.png"))

    # >>><<<
    from matplotlib import pyplot as plt
    # histogram_patches(patches)

    thresh = 170
    min_size = 6
    um_per_px = 1e3 / pattern_params["px_per_mm"]

    for i, patch in patches.items():
        area, count, contours = parse_patch(patch.copy(),
                                            threshold=thresh,
                                            min_size=min_size,
                                            return_image=True)
        waves.area.loc[i] = um_per_px ** 2 * area
        waves.obj_count.loc[i] = count
        waves.wave.loc[i] = cell_to_array(waves.wave.loc[i])
        waves.vector.loc[i] = cell_to_array(waves.vector.loc[i])

        log_pic(patch, i)
        log_pic(contours, f"{i}_contours_area {area}_count {count}")

        # Experimental
        waves.absintegral.loc[i] = np.sum(np.abs(waves.wave.loc[i]))
        waves.absmax.loc[i] = np.max(waves.wave.loc[i])
        waves.vmag.loc[i] = np.sqrt(np.sum(waves.vector.loc[i] ** 2))
        waves.bias.loc[i] = np.abs(waves.vector.loc[i][0])
        
    # Remove rows without a patch
    waves.drop(waves[waves.bias.isnull()].index, inplace=True)

    plt.plot(waves.absintegral, waves.area, '*')
    plt.title('abs integral vs printed area')
    plt.show()

    plt.plot(waves.absmax, waves.area, '*')
    plt.title('abs max vs printed area')
    plt.show()

    plt.plot(waves.vmag, waves.area, '*')
    plt.title('vector magnitude vs printed area')
    # plt.xlim(1.5, 3)
    plt.show()

    plt.plot(waves.bias, waves.area, '*')
    plt.title('waveform bias vs printed area')
    plt.show()
    
    waves.to_excel(output_file)
